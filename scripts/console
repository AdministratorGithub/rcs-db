#!/usr/bin/env ruby
require 'optparse'

class RCSConsole
  def verbose?
    @options[:verbose]
  end

  def windows?
    RbConfig::CONFIG['host_os'] =~ /mingw/
  end

  def root_path
    @root_path ||= begin
      return 'C:/RCS/DB' if windows?
      current_path = File.dirname __FILE__
      root_path = File.expand_path File.join(current_path, '..')
    end
  end

  def ignoring_warnings
    v, $VERBOSE = $VERBOSE, nil
    yield if block_given?
  ensure
    $VERBOSE = v
  end

  def colorize(text)
    "\033[30;42m#{text}\033[0m "
  end

  def setup
    $execution_directory = root_path

    $LOAD_PATH << $execution_directory+"/lib"
    Dir.chdir($execution_directory)

    unless windows?
      require 'bundler'
      Bundler.load
      Bundler.setup
    end

    require 'pp'
    require 'rcs-common/path_utils'
    require_release 'rcs-db/config'
    require_release 'rcs-db/db_layer'

    host, port = @options[:address]
    w_host, w_port = @options[:w_address]

    ENV['MONGOID_ENV']      = 'yes'

    ENV['MONGOID_DATABASE'] = @options[:db]
    ENV['MONGOID_HOST']     = host
    ENV['MONGOID_PORT']     = port

    ENV['MONGOID_WORKER_DATABASE'] = @options[:w_db]
    ENV['MONGOID_WORKER_HOST']     = w_host
    ENV['MONGOID_WORKER_PORT']     = w_port

    RCS::DB::Config.instance.load_from_file

    RCS::DB::Config.instance.global['CN'] = host

    eval "class RCS::DB::DB
      def connect
        Mongoid.load!(RCS::DB::Config.instance.file('mongoid.yaml'), :production)
      end
    end"

    RCS::DB::DB.instance.connect

    if @options[:show_moped_queries]
      Moped.logger = Logger.new $stdout
      Moped.logger.level = 0
      Moped.logger.formatter = proc { |sev, time, progname, str| colorize("#{str}\n") }
    end
  end

  attr_reader :options

  def initialize(options)
    @options = options

    @options[:address]   ||= '127.0.0.1'
    @options[:address] << ':27017' unless @options[:address].include?(':')
    @options[:address] = @options[:address].split(':')
    @options[:db]        ||= 'rcs'

    if @options[:w_address]
      @options[:w_address] << ':27018' unless @options[:w_address].include?(':')
      @options[:w_address] = @options[:w_address].split(':')
    else
      @options[:w_address] = [@options[:address][0], '27018']
    end

    @options[:w_db] ||= 'rcs-worker'
  end

  def noecho
    if verbose?
      yield
      return
    end

    require 'stringio'

    stdout, $stdout = $stdout, StringIO.new

    yield
  ensure
    $stdout = stdout if stdout
  end

  def self.start(binding)
    options = {}

    optparse = OptionParser.new do |opts|
      opts.banner = "Usage: console [options]"
      opts.on( '-h HOST', '--host HOST:PORT', String, 'Ip addr (and port), default is 127.0.0.1:27017') { |value| options[:address] = value }
      opts.on( '-d DB', '--db DB', String, 'Database name, default is rcs') { |value| options[:db] = value }
      opts.on( '-q', '--show-moped-queries', 'Show all the queries exceuted by the Moped driver') { |value| options[:show_moped_queries] = true }
      opts.on( '--w-host HOST:PORT', String, 'Ip addr (and port) of worker database, default is the same of --host but port is 27018') { |value| options[:w_address] = value }
      opts.on( '--w-db DB', String, 'Worker database name, default is rcs-worker') { |value| options[:w_db] = value }
      opts.on( '--verbose') { |value| options[:verbose] = true }
    end.parse!

    console = new(options)

    puts "Options: #{console.options.inspect}"
    print "Loading..."

    console.noecho {
      console.setup
    }

    sessions = Mongoid.sessions.dup
    sessions.keys.each { |key| sessions[key].delete("options") }
    puts "\rMongoid sessions: #{sessions.inspect}"

    binding.pry
  end
end

if $0 == __FILE__
  require 'pry'

  class Pry::Command::Whereami
    def process; end
  end

  RCSConsole.start(binding)
end
