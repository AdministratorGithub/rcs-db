require 'helper'
require_db 'build'
require_db 'config'
require_db 'build/exploit'

module RCS
module DB

class Exploit
  def self.trace(a, b)
  end
end
class CrossPlatform
  def self.trace(a, b)
  end
end
class Build
  def trace(a, b)
  end
end
class BuildExploit
  # this is a fake method to create an agent without really creating it from the cores
  def build_agent(params)
    File.open(path('agent'), 'w') {|f| f.write "test agent"}
  end
  # don't deliver during tests
  def deliver(params)
  end
end

class ExploitTest < Test::Unit::TestCase

  # Called before every test method runs. Can be used
  # to set up fixture information.
  def setup
    # Do nothing
  end

  # Called after every test method runs. Can be used to tear
  # down fixture information.

  def teardown
    # Do nothing
  end

  def test_load_list
    list = Exploit.all
    files = Dir['exploits/**'].count
    assert_equal(files, list.size)
  end

  def test_build_all
    exploits = Exploit.all

    params = {'factory' =>{'_id' => 123},
              'generate' => {'exploit' => 'HT-2012-000',
                             'binary' => {demo: true, admin: false},
                              'melt' => {admin: false}
                            },
              'melt' => {'appname' => 'facebook',
                         'url' => 'http://download.me/'}
              }

    exploits.each do |exp|
      puts exp['id']
      params['generate']['exploit'] = exp['id']
      build = Build.factory(:exploit)
      build.create params
      assert_true File.exist?(build.path(build.outputs.first))
      build.clean
    end

  end

end

end
end
