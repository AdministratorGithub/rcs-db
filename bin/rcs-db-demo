#!/usr/bin/env ruby

require 'fileutils'
require 'optparse'

module BackupManager
  extend self

  PATH = File.expand_path('../..', __FILE__)
  DATAPATH = File.join(PATH, 'data')
  BACKUPPATH = File.join(PATH, '_data_backup')

  def without_mongo
    list = %w[RCSMasterRouter RCSMasterConfig RCSShard]
    # list.each { |name| system("NET STOP #{name}"); sleep(2) }
    puts "Copying files. Please wait."
    yield
  ensure
    list.reverse.each { |name| system("NET START #{name}"); sleep(2) }
  end
  
  def backup(restore_point_name = nil)
    bfolder = restore_point_name || Time.now.strftime('%Y%m%d_%H%M%S')
    bfolder = File.join(BACKUPPATH, bfolder)
    raise "Unable to backup. Folder #{folder} already exists." if Dir.exists?(bfolder)
    FileUtils.mkdir(bfolder)
    without_mongo { FileUtils.cp_r(DATAPATH, bfolder) }
  end

  def list
    dir = Dir[File.join(BACKUPPATH, '*')]
    puts "There are #{dir.size} restore points"
    dir.each { |n| puts(File.basename(n)) }
  end
  
  def restore(folder)
    folder = File.join(BACKUPPATH, folder)
    raise "Cannot find folder #{folder}" unless Dir.exists?(folder)
    without_mongo { FileUtils.rm_rf(DATAPATH); FileUtils.cp_r(folder, DATAPATH) }
  end

  def ensure_paths
    raise "Cannot find folder #{DATAPATH}" unless Dir.exists?(DATAPATH)
    FileUtils.mkdir(BACKUPPATH) unless Dir.exists?(BACKUPPATH)
  end
end

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: rcs-db-demo [options]"
  opts.on( '-b [RESTORE_POINT_NAME]', '--backup [RESTORE_POINT_NAME]', 'Backup "data" folder') { |name| options[:backup] = name || true }
  opts.on( '-l', '--list', 'List available restore points') { options[:list] = true }
  opts.on( '-r RESTORE_POINT', '--restore RESTORE_POINT', String, 'Restore "data" folder') { |point| options[:restore] = point }
end

optparse.parse(ARGV)

BackupManager.ensure_paths

if options.empty?
  puts "Use --help"
  exit
end

if options[:list]
  BackupManager.list
elsif options[:backup]
  restore_point_name = options[:backup] == true ? nil : options[:backup]
  BackupManager.backup(restore_point_name)
elsif options[:restore]
  BackupManager.restore(options[:restore])
end
